import os
import json
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ===
BOT_TOKEN = os.getenv("BOT_TOKEN") or "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class AlexBSalesAgent:
    def __init__(self, profile="partners"):
        self.profile = profile
        self.load_personal_traits()
        self.db = self.init_db()
        
    def load_personal_traits(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        base_path = "C:/Users/user/Projects/backend/ai_agents/AlexB-Sales/personal"
        self.psych_profile = self.load_text_file(f"{base_path}/psych_report.txt")
        self.nlp_profile = self.load_text_file(f"{base_path}/nl_profile.txt")
        self.chat_styles = self.load_messenger_styles(f"{base_path}/messenger_chats")
        
    def load_text_file(self, path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if os.path.exists(path):
            with open(path, 'r', encoding='utf-8') as f:
                return f.read()
        return ""
    
    def load_messenger_styles(self, dir_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤"""
        styles = {}
        if os.path.exists(dir_path):
            for filename in os.listdir(dir_path):
                if filename.endswith('.txt'):
                    platform = filename.split('.')[0]
                    styles[platform] = self.load_text_file(f"{dir_path}/{filename}")
        return styles
        
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_path = "C:/Users/user/Projects/backend/ai_agents/AlexB-Sales/data"
        os.makedirs(db_path, exist_ok=True)
        return sqlite3.connect(f"{db_path}/{self.profile}.db")
    
    def switch_profile(self, new_profile):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏ (–ø–∞—Ä—Ç–Ω—ë—Ä—ã/–∫–ª–∏–µ–Ω—Ç—ã/–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)"""
        self.profile = new_profile
        self.db.close()
        self.db = self.init_db()
        print(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {new_profile}")

# === Telegram —Ö–µ–Ω–¥–ª–µ—Ä—ã ===

@dp.message_handler(commands=["start"])
async def handle_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø AlexB-Sales ‚Äî –±–æ—Ç-–∞–≥–µ–Ω—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    agent = AlexBSalesAgent()
    print("–ê–≥–µ–Ω—Ç AlexB-Sales –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è: {len(agent.chat_styles)}")

    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ polling-—Ä–µ–∂–∏–º–µ (–ª–æ–∫–∞–ª—å–Ω–æ)
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
